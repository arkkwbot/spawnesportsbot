import requests
import time
import json
from datetime import datetime
from bs4 import BeautifulSoup
import logging
from typing import Dict, List, Set
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class BettingMonitor:
    def __init__(self, config_file: str = 'config.json'):
        """Inicializa o monitor com configura√ß√µes"""
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # Carrega configura√ß√µes
        self.config = self.load_config(config_file)
        
        # Armazena jogos j√° notificados para evitar spam
        self.notified_games = set()
        
    def load_config(self, config_file: str) -> Dict:
        """Carrega configura√ß√µes do arquivo JSON"""
        default_config = {
            "monitored_categories": ["lol", "counter_strike"],
            "notification_methods": {
                "email": {
                    "enabled": False,
                    "smtp_server": "smtp.gmail.com",
                    "smtp_port": 587,
                    "email_user": "",
                    "email_password": "",
                    "recipient": ""
                },
                "telegram": {
                    "enabled": True,
                    "bot_token": "7515363058:AAH_snuawhCciTdxJZFhfR4TV_fTk1WlHrg",
                    "chat_id": "7638499009"
                }
            },
            "check_interval": 300,  # 5 minutos
            "duelbits_enabled": True,
            "pinnacle_enabled": True
        }
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # Mescla com configura√ß√µes padr√£o
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
        except FileNotFoundError:
            logging.info(f"Arquivo {config_file} n√£o encontrado. Criando com configura√ß√µes padr√£o...")
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            return default_config

    def filter_lol_games(self, containers, soup_content: str) -> List:
        """Filtra jogos de LoL por ligas espec√≠ficas"""
        lol_leagues = [
            # Tier 1
            'LTA Norte', 'LTA Norte', 'LTA Sul', 'LEC EMEA', 'LCK', 'LPL', 'LCP',
            # Tier 2
            'EMEA Masters', 'TCL', 'LVP', 'Prime League', 'Ultraliga', 'VCS', 'LJL', 'PCS',
            # Torneios
            'Worlds', 'MSI', 'First Stand', 'World Championship', 'Mid-Season Invitational'
        ]
        
        filtered_games = []
        for container in containers:
            game_text = container.get_text().lower()
            # Verifica se menciona alguma liga espec√≠fica do LoL
            if any(league.lower() in game_text for league in lol_leagues) or \
               any(keyword in game_text for keyword in ['league of legends', 'lol', 'rift']):
                filtered_games.append(container)
        
        return filtered_games
    
    def filter_cs_games(self, containers, soup_content: str) -> List:
        """Filtra jogos de CS por ligas/torneios espec√≠ficos"""
        cs_tournaments = [
            # Tier S
            'PGL Major', 'BLAST Premier', 'IEM', 'Intel Extreme Masters',
            # Tier 1  
            'ESL Pro League', 'ESL Pro Tour', 'PGL',
            # Tier 2
            'ESL Challenger', 'FACEiT', 'ESEA', 'Qualifier'
        ]
        
        filtered_games = []
        for container in containers:
            game_text = container.get_text().lower()
            # Verifica se menciona algum torneio espec√≠fico do CS
            if any(tournament.lower() in game_text for tournament in cs_tournaments) or \
               any(keyword in game_text for keyword in ['counter-strike', 'cs2', 'cs:go']):
                filtered_games.append(container)
        
        return filtered_games

    def identify_lol_league(self, game_text: str) -> str:
        """Identifica a liga espec√≠fica do LoL baseado no texto"""
        text_lower = game_text.lower()
        
        # Tier 1
        if any(x in text_lower for x in ['lta norte', 'lta north', 'americas north']):
            return 'üèÜ LTA Norte'
        elif any(x in text_lower for x in ['lta sul', 'lta south', 'americas south']):
            return 'üèÜ LTA Sul' 
        elif any(x in text_lower for x in ['lec', 'emea']):
            return 'üèÜ LEC EMEA'
        elif 'lck' in text_lower:
            return 'üèÜ LCK'
        elif 'lpl' in text_lower:
            return 'üèÜ LPL'
        elif any(x in text_lower for x in ['lcp', 'pacific']):
            return 'üèÜ LCP'
        
        # Tier 2
        elif any(x in text_lower for x in ['emea masters', 'masters emea']):
            return 'ü•à EMEA Masters'
        elif 'tcl' in text_lower:
            return 'ü•à TCL'
        elif 'lvp' in text_lower:
            return 'ü•à LVP'
        elif any(x in text_lower for x in ['prime league', 'primeleague']):
            return 'ü•à Prime League'
        elif 'ultraliga' in text_lower:
            return 'ü•à Ultraliga'
        elif 'vcs' in text_lower:
            return 'ü•à VCS'
        elif 'ljl' in text_lower:
            return 'ü•à LJL'
        elif 'pcs' in text_lower:
            return 'ü•à PCS'
        
        # Torneios
        elif any(x in text_lower for x in ['worlds', 'world championship']):
            return 'üåç Worlds'
        elif any(x in text_lower for x in ['msi', 'mid-season']):
            return 'üåç MSI'
        elif 'first stand' in text_lower:
            return 'üåç First Stand'
        
        return 'üéÆ LoL - Liga n√£o identificada'
    
    def identify_cs_tournament(self, game_text: str) -> str:
        """Identifica o torneio espec√≠fico do CS baseado no texto"""
        text_lower = game_text.lower()
        
        # Tier S
        if any(x in text_lower for x in ['pgl major', 'major championship']):
            return 'üëë PGL Major'
        elif any(x in text_lower for x in ['blast premier', 'blast pro']):
            return 'üëë BLAST Premier'
        elif any(x in text_lower for x in ['iem', 'intel extreme masters']):
            return 'üëë IEM'
        
        # Tier 1
        elif any(x in text_lower for x in ['esl pro league', 'pro league']):
            return 'üèÜ ESL Pro League'
        elif any(x in text_lower for x in ['esl pro tour', 'pro tour']):
            return 'üèÜ ESL Pro Tour'
        elif 'pgl' in text_lower and 'major' not in text_lower:
            return 'üèÜ PGL Tournament'
        
        # Tier 2
        elif any(x in text_lower for x in ['esl challenger', 'challenger league']):
            return 'ü•à ESL Challenger'
        elif 'faceit' in text_lower:
            return 'ü•à FACEiT'
        elif 'esea' in text_lower:
            return 'ü•à ESEA'
        elif any(x in text_lower for x in ['qualifier', 'qualif']):
            return 'ü•à Qualifier'
        
        return 'üî´ CS - Torneio n√£o identificado'

    def scrape_duelbits(self) -> List[Dict]:
        """Scraping da DuelBits"""
        try:
            games = []
            
            # URLs espec√≠ficas para LoL e CS na DuelBits
            sport_urls = {
                'lol': 'https://duelbits.com/esports/league-of-legends',
                'counter_strike': 'https://duelbits.com/esports/counter-strike'
            }
            
            # URLs backup caso as espec√≠ficas n√£o existam
            esports_backup_urls = [
                'https://duelbits.com/esports',
                'https://duelbits.com/sports/esports',
                'https://duelbits.com/esports/lol',
                'https://duelbits.com/esports/cs2'
            ]
            
            for category, url in sport_urls.items():
                if category not in self.config['monitored_categories']:
                    continue
                    
                try:
                    response = self.session.get(url, timeout=10)
                    soup = BeautifulSoup(response.content, 'html.parser')
                    
                    # DuelBits pode usar estrutura diferente, procura por containers t√≠picos
                    game_containers = soup.find_all('div', class_=['match-card', 'event-item', 'game-row', 'match-row', 'esports-event'])
                    
                    # Se n√£o encontrou na URL espec√≠fica, tenta na URL geral de esports
                    if not game_containers and category in ['lol', 'counter_strike']:
                        for backup_url in esports_backup_urls:
                            try:
                                backup_response = self.session.get(backup_url, timeout=10)
                                backup_soup = BeautifulSoup(backup_response.content, 'html.parser')
                                all_containers = backup_soup.find_all('div', class_=['match-card', 'event-item', 'game-row', 'match-row', 'esports-event'])
                                
                                # Filtra por game espec√≠fico se encontrar containers
                                if all_containers:
                                    if category == 'lol':
                                        game_containers = self.filter_lol_games(all_containers, backup_response.text)
                                    elif category == 'counter_strike':
                                        game_containers = self.filter_cs_games(all_containers, backup_response.text)
                                    
                                    if game_containers:
                                        break
                            except:
                                continue
                    
                    for container in game_containers:
                        try:
                            # Extrai informa√ß√µes do jogo + identifica liga espec√≠fica
                            teams_elem = container.find('div', class_=['teams', 'match-teams', 'participants', 'competitors'])
                            odds_elem = container.find('div', class_=['odds', 'match-odds', 'prices', 'betting-odds'])
                            time_elem = container.find('div', class_=['time', 'match-time', 'start-time', 'event-time'])
                            league_elem = container.find('div', class_=['league', 'tournament', 'competition', 'event-league'])
                            
                            if teams_elem and odds_elem:
                                teams = teams_elem.get_text(strip=True)
                                odds = odds_elem.get_text(strip=True)
                                match_time = time_elem.get_text(strip=True) if time_elem else "N/A"
                                league = league_elem.get_text(strip=True) if league_elem else "Liga n√£o identificada"
                                
                                # Identifica a liga espec√≠fica baseada no texto
                                if category == 'lol':
                                    league = self.identify_lol_league(container.get_text())
                                elif category == 'counter_strike':
                                    league = self.identify_cs_tournament(container.get_text())
                                
                                game_id = f"duelbits_{category}_{hash(teams + match_time + league)}"
                                
                                if game_id not in self.notified_games:
                                    games.append({
                                        'id': game_id,
                                        'platform': 'DuelBits',
                                        'category': category,
                                        'teams': teams,
                                        'odds': odds,
                                        'time': match_time,
                                        'league': league,
                                        'url': url
                                    })
                                    
                        except Exception as e:
                            logging.error(f"Erro ao processar jogo individual na DuelBits: {e}")
                            continue
                    
                    time.sleep(1)  # Rate limiting
                    
                except Exception as e:
                    logging.error(f"Erro ao scraping DuelBits categoria {category}: {e}")
                    continue
                    
            return games
            
        except Exception as e:
            logging.error(f"Erro geral no scraping da DuelBits: {e}")
            return []

    def scrape_pinnacle(self) -> List[Dict]:
        """Scraping da Pinnacle"""
        try:
            games = []
            
            # URLs para diferentes esportes na Pinnacle
            sport_urls = {
                'lol': 'https://www.pinnacle.com/en/esports/league-of-legends',
                'counter_strike': 'https://www.pinnacle.com/en/esports/counter-strike'
            }
            
            for category, url in sport_urls.items():
                if category not in self.config['monitored_categories']:
                    continue
                    
                try:
                    response = self.session.get(url, timeout=10)
                    soup = BeautifulSoup(response.content, 'html.parser')
                    
                    # Pinnacle tem estrutura diferente, procura por elementos espec√≠ficos
                    game_containers = soup.find_all('div', class_=['event', 'match', 'game-row'])
                    
                    for container in game_containers:
                        try:
                            # Extrai informa√ß√µes do jogo
                            teams_elem = container.find('span', class_=['participants', 'teams'])
                            odds_elems = container.find_all('span', class_=['price', 'odd'])
                            time_elem = container.find('span', class_=['start-time', 'time'])
                            
                            if teams_elem and odds_elems:
                                teams = teams_elem.get_text(strip=True)
                                odds = ' | '.join([odd.get_text(strip=True) for odd in odds_elems])
                                match_time = time_elem.get_text(strip=True) if time_elem else "N/A"
                                
                                # Identifica a liga espec√≠fica baseada no texto
                                if category == 'lol':
                                    league = self.identify_lol_league(container.get_text())
                                elif category == 'counter_strike':
                                    league = self.identify_cs_tournament(container.get_text())
                                else:
                                    league = "Liga n√£o identificada"
                                
                                game_id = f"pinnacle_{category}_{hash(teams + match_time)}"
                                
                                if game_id not in self.notified_games:
                                    games.append({
                                        'id': game_id,
                                        'platform': 'Pinnacle',
                                        'category': category,
                                        'teams': teams,
                                        'odds': odds,
                                        'time': match_time,
                                        'league': league,
                                        'url': url
                                    })
                                    
                        except Exception as e:
                            logging.error(f"Erro ao processar jogo individual na Pinnacle: {e}")
                            continue
                    
                    time.sleep(1)  # Rate limiting
                    
                except Exception as e:
                    logging.error(f"Erro ao scraping Pinnacle categoria {category}: {e}")
                    continue
                    
            return games
            
        except Exception as e:
            logging.error(f"Erro geral no scraping da Pinnacle: {e}")
            return []

    def send_email_notification(self, games: List[Dict]):
        """Envia notifica√ß√£o por email"""
        if not self.config['notification_methods']['email']['enabled']:
            return
            
        try:
            email_config = self.config['notification_methods']['email']
            
            msg = MIMEMultipart()
            msg['From'] = email_config['email_user']
            msg['To'] = email_config['recipient']
            msg['Subject'] = f"üö® Novos jogos encontrados - {datetime.now().strftime('%H:%M')}"
            
            body = "Novos jogos dispon√≠veis para apostas:\n\n"
            
            for game in games:
                body += f"üéÆ {game['platform']} - {game['category'].upper()}\n"
                body += f"üèüÔ∏è {game['league']}\n"
                body += f"‚ö° {game['teams']}\n"
                body += f"üí∞ Odds: {game['odds']}\n"
                body += f"‚è∞ Hor√°rio: {game['time']}\n"
                body += f"üîó Link: {game['url']}\n"
                body += "-" * 50 + "\n\n"
                
            msg.attach(MIMEText(body, 'plain'))
            
            server = smtplib.SMTP(email_config['smtp_server'], email_config['smtp_port'])
            server.starttls()
            server.login(email_config['email_user'], email_config['email_password'])
            server.send_message(msg)
            server.quit()
            
            logging.info(f"Email enviado com {len(games)} novos jogos")
            
        except Exception as e:
            logging.error(f"Erro ao enviar email: {e}")

    def send_telegram_notification(self, games: List[Dict]):
        """Envia notifica√ß√£o via Telegram"""
        if not self.config['notification_methods']['telegram']['enabled']:
            return
            
        try:
            telegram_config = self.config['notification_methods']['telegram']
            
            message = f"üö® *Novos jogos encontrados* - {datetime.now().strftime('%H:%M')}\n\n"
            
            for game in games:
                message += f"üéÆ *{game['platform']}* - {game['category'].upper()}\n"
                message += f"üèüÔ∏è {game['league']}\n"
                message += f"‚ö° {game['teams']}\n"
                message += f"üí∞ Odds: `{game['odds']}`\n"
                message += f"‚è∞ Hor√°rio: {game['time']}\n"
                message += f"üîó [Apostar]({game['url']})\n"
                message += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            
            url = f"https://api.telegram.org/bot{telegram_config['bot_token']}/sendMessage"
            data = {
                'chat_id': telegram_config['chat_id'],
                'text': message,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                logging.info(f"Telegram enviado com {len(games)} novos jogos")
            else:
                logging.error(f"Erro ao enviar Telegram: {response.text}")
                
        except Exception as e:
            logging.error(f"Erro ao enviar Telegram: {e}")

    def notify_new_games(self, games: List[Dict]):
        """Envia notifica√ß√µes sobre novos jogos"""
        if not games:
            return
            
        logging.info(f"Enviando notifica√ß√µes para {len(games)} novos jogos")
        
        # Envia por todos os m√©todos habilitados
        self.send_email_notification(games)
        self.send_telegram_notification(games)
        
        # Marca jogos como notificados
        for game in games:
            self.notified_games.add(game['id'])

    def run_monitoring_cycle(self):
        """Executa um ciclo de monitoramento"""
        logging.info("Iniciando ciclo de monitoramento...")
        
        all_new_games = []
        
        # Scraping da DuelBits
        if self.config.get('duelbits_enabled', True):
            logging.info("Fazendo scraping da DuelBits...")
            duelbits_games = self.scrape_duelbits()
            all_new_games.extend(duelbits_games)
            
        # Scraping da Pinnacle  
        if self.config.get('pinnacle_enabled', True):
            logging.info("Fazendo scraping da Pinnacle...")
            pinnacle_games = self.scrape_pinnacle()
            all_new_games.extend(pinnacle_games)
            
        # Notifica sobre novos jogos
        if all_new_games:
            logging.info(f"Encontrados {len(all_new_games)} novos jogos!")
            self.notify_new_games(all_new_games)
        else:
            logging.info("Nenhum jogo novo encontrado neste ciclo")

    def start_monitoring(self):
        """Inicia o monitoramento cont√≠nuo"""
        logging.info("ü§ñ Bot de monitoramento iniciado!")
        logging.info(f"üìä Categorias monitoradas: {self.config['monitored_categories']}")
        logging.info(f"‚è∞ Intervalo de verifica√ß√£o: {self.config['check_interval']} segundos")
        
        while True:
            try:
                self.run_monitoring_cycle()
                
                # Aguarda antes do pr√≥ximo ciclo
                logging.info(f"üí§ Aguardando {self.config['check_interval']} segundos...")
                time.sleep(self.config['check_interval'])
                
            except KeyboardInterrupt:
                logging.info("üõë Monitoramento interrompido pelo usu√°rio")
                break
            except Exception as e:
                logging.error(f"Erro no ciclo de monitoramento: {e}")
                logging.info("Aguardando 60 segundos antes de tentar novamente...")
                time.sleep(60)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Inicializando Bot Monitor de Apostas...")
    print("üìã Plataformas: DuelBits e Pinnacle")
    print("‚öôÔ∏è Carregando configura√ß√µes...")
    
    try:
        monitor = BettingMonitor()
        monitor.start_monitoring()
    except Exception as e:
        logging.error(f"Erro fatal: {e}")
        print(f"‚ùå Erro ao inicializar o bot: {e}")

if __name__ == "__main__":
    main()